{"ts":1368523612479,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"from flask import Flask, url_for, request, Response, session\nfrom flask import render_template\nimport sys, struct, re, json, sqlite3, os\nfrom datetime import date\nfrom functools import wraps\nfrom secrets import user, passwd, debug, key\n\n\ndef check_auth(username, password):\n    return username == user and password == passwd\n\ndef authenticate():\n    return Response(\n            \"Could not verify access level for url.\\n\"\n            \"You have to login with proper credentials\", 401,\n            {'WWW-Authenticate': 'Basic realm=\"Login Required'})\n\ndef requires_auth(f):\n    @wraps(f)\n    def decorated(*args, **kwargs):\n        auth = request.authorization\n        if not auth or not check_auth(auth.username, auth.password):\n            return authenticate()\n        return f(*args, **kwargs)\n    return decorated\n\ndef expand_string(string):\n    res = string\n    while \"\\xfc\" in res:\n        number = res[res.find(\"\\xfc\")+1]\n        if number == \"\\x03\":\n            res = res.replace(\"\\xfc\\x03\", \"\\x30\\x30\\x30\")\n        elif number == \"\\x04\":\n            res = res.replace(\"\\xfc\\x04\", \"\\x30\\x30\\x30\\x30\")\n        elif number == \"\\x05\":\n            res = res.replace(\"\\xfc\\x05\", \"\\x30\\x30\\x30\\x30\\x30\")\n        elif number == \"\\x06\":\n            res = res.replace(\"\\xfc\\x06\", \"\\x30\\x30\\x30\\x30\\x30\\x30\")\n        else:\n            break\n    return res\n\n\ndef get_identifier(string):\n    if string[12]!=\"0\":\n        print \"ERROR: \", string\n        print string[12]\n        return (None, None)\n    else:\n        if string[17:20] == \"\\x33\\xfc\\x03\":\n            return (string[12:18] + \"000\" + string[20], 21)\n        elif string[17:20] == \"\\x31\\xfc\\x03\":\n            return (string[12:18] + \"000\" + string[20], 21)\n        elif string[17:20] == \"\\x32\\xfc\\x03\":\n            return (string[12:18] + \"000\" + string[20], 21)\n        elif string[17:20] == \"\\x38\\xfc\\x03\":\n            return (string[12:18] + \"000\" + string[20], 21)\n        elif string[17:20] == \"\\x39\\xfc\\x03\":\n            return (string[12:18] + \"000\" + string[20], 21)\n        elif string[17:20] == \"\\x37\\xfc\\x03\":\n            return (string[12:18] + \"000\" + string[20], 21)\n        elif string[16:19] == \"\\x31\\xfc\\x03\":\n            return (string[12:17] + \"000\" + string[19:21], 21)\n        elif string[16:19] == \"\\x31\\xfc\\x04\":\n            return (string[12:17] + \"0000\" + string[19], 20)\n        elif re.match(r\"^\\d+$\", string[17:22]):\n            return (string[12:22], 22)\n        else:\n            print \"ERROR: \" + string\n            print ord(string[18]), ord(string[19]), ord(string[20])\n            print  \":\".join(\"{0:x}\".format(ord(c)) for c in string[16:20])\n            return (None,None)\n\ndef get_payment_details(string, number):\n    res = []\n    temp = string.split(\"\\xfd\\x08\\xfc\\x08\")[0]\n    entries = temp.split(\"\\xfd\\x08\")\n\n    for e in entries:\n        etemp = expand_string(e)\n        payment_method = etemp[12]\n        if payment_method not in [\"B\",\"C\",\"K\"]:\n            payment_method = \"U\"\n        try:\n            d = str(struct.unpack(\">I\", etemp[8:12])[0])\n            pay_date = date(int(d[:4]),int(d[4:6]),int(d[6:]))\n            res.append((int(etemp[:8]),pay_date, payment_method))\n        except ValueError:\n            print \"oops in append!!\"\n            print etemp[:8]\n    return res\n\n\nclass Student:\n    def __init__(self, identifier, name, street, number, zip_code, city):\n        self.identifier = identifier\n        self.name = unicode(name, \"cp1252\")\n        self.street = unicode(street, \"cp1252\")\n        self.number = number\n        self.zip_code = zip_code\n        self.city = city\n        self.payments = []\n        self.unique = \"1\" + \"/\" + self.identifier[6:] + \"/\" + self.identifier[2:6]\n\n    def append_payments(self, payments):\n        self.payments.extend(payments)\n\n    def get_payments_between(self, date1, date2):\n        return filter(lambda (x,y,z): date1 <= y <= date2, self.payments)\n\n    def get_header(self):\n        res = self.identifier + \" \" + self.name\n        res += \"\\n\" + self.street + \" \" + self.number + \"\\n\"\n        res += self.zip_code + \" \" + self.city\n        return res\n\n    def to_string(self):\n        res = self.identifier + \" \" + self.name\n        res += \"\\n\" + self.street + \" \" + self.number + \"\\n\"\n        res += self.zip_code + \" \" + self.city\n        res += \"\\n\" + str(self.payments)\n        return res\n\ndef read_database_files():\n    f = open(\"BST/llal\")\n    lines = f.readlines()\n    content = \"\".join(lines)\n    students = []\n\n    indexes = [m.end() for m in re.finditer('[\\x00]{65}\\x01', content)]\n\n    previous = 0\n    length = 450\n    for entry in indexes:\n        previous += 1\n        string = content[entry:entry+length]\n        #regex = re.compile(r\"([A-Z]{4})\")\n        #m = regex.match(string)\n        (identifier, index) = get_identifier(string)\n        if not identifier:\n            continue\n        temp = string[index: index + 25].split(chr(253))\n        index = index + len(temp[0])\n        name = temp[0]\n        if string[index] == \"\\xfd\":\n            index = index + 2\n        regex = re.compile(\".*(\\d{8})[ABCDE].*\")\n        m = regex.match(string[index:index+20])\n        if string[index:index+5] == \"\\x32\\x30\\xfe\\x31\\x05\":\n            print identifier\n            print \"11111111\"\n            index = index + 6\n        elif string[index:index+5] == \"\\x32\\x30\\xfe\\x31\\x04\":\n            print identifier\n            print \"11111111\"\n            index = index + 7\n        elif m:\n            index = index + m.start() + 8\n        else:\n            print \":\".join(\"{0:x}\".format(ord(c)) for c in string[index: index+20])\n            print \"error: \", string[index: index + 20]\n\n        ll_type = string[index: index+2]\n        index = index + 2\n        street = string[index: index+40].split(chr(253))[0]\n        if len(street)>20:\n            street = street[:20]\n        index = index + len(street)\n        if string[index] == \"\\xfd\":\n            index = index + 2\n\n        m = re.match(r\"(.*)(\\d\\d\\d\\d[A-Z][A-Z][A-Z\\-]+\\W)\", string[index: index+40])\n        if m:\n            pattern = re.compile(\"[\\W_]+\")\n            number = pattern.sub('',m.group(1))\n            code = m.group(2)[:4]\n            town = m.group(2)[4:-1]\n            index = index + len(m.group(1) + m.group(2)) +1\n        else:\n            m = re.match(r\"(.*)(\\d..[A-Z][A-Z][A-Z]+\\W)\", string[index: index+40])\n            if m:\n                pattern = re.compile(\"[\\W_]+\")\n                number = pattern.sub('',m.group(1))\n                code = m.group(2)[0] + \"000\"\n                town = m.group(2)[3:-1]\n                index = index + len(m.group(1) + m.group(2)) +1\n            else:\n                print \"error\"\n                print string[index: index+20]\n                print \":\".join(\"{0:x}\".format(ord(c)) for c in string[index: index+20])\n                sys.exit()\n\n        students.append(Student(identifier, name, street, number, code, town))\n\n    f = open(\"BST/llbe\")\n\n    lines = f.readlines()\n\n    content = \"\".join(lines)\n\n    indexes = [m.start() for m in re.finditer('012....?..\\dE', content)]\n\n    payment_details = {}\n    for i in indexes:\n            if content[i+5:i+7] == \"\\xfc\\x03\":\n                identifier = content[i:i+5] + \"000\" + content[i+7:i+9]\n            elif content[i+6:i+8] == \"\\xfc\\x03\":\n                identifier = content[i:i+6] + \"000\" + content[i+8:i+9]\n            else:\n                identifier = content[i:i+10]\n                currency = content[i+10]\n            try:\n                int(identifier)\n            except ValueError:\n                print \"invalid identifier error\", identifier\n                print \":\".join(\"{0:x}\".format(ord(c)) for c in identifier)\n                continue\n            m = re.match(r\".*\\W(\\d\\d)\", content[i+11:i+100])\n            try:\n                if content[i+5:i+7] == \"\\xfc\\x03\":\n                    if content[i+22:i+24] == \"\\x31\\xfc\":\n                        nb_payments = 10\n                        payments = get_payment_details(content[i+24:], nb_payments)\n                    elif content[i+22:i+24] == \"\\xfc\\x0a\" or content[i+22:i+24] == \"\\xfd\\x08\" or content[i+22:i+24] == \"\\x08\\xfc\":\n                        nb_payments = 0\n                        payments = []\n                    else:\n                        #print \":\".join(\"{0:x}\".format(ord(c)) for c in content[i+22:i+24])\n                        nb_payments = int( content[i+22:i+24])\n                        payments = get_payment_details(content[i+24:], nb_payments)\n                elif content[i+6:i+8] == \"\\xfc\\x03\":\n                    if content[i+22:i+24] == \"\\x31\\xfc\":\n                        nb_payments = 10\n                        payments = get_payment_details(content[i+24:], nb_payments)\n                    elif content[i+22:i+24] == \"\\xfc\\x0a\" or content[i+22:i+24] == \"\\xfd\\x08\" or content[i+22:i+24] == \"\\x08\\xfc\":\n                        nb_payments = 0\n                        payments = []\n                    else:\n                        #print \":\".join(\"{0:x}\".format(ord(c)) for c in content[i+22:i+24])\n                        nb_payments = int( content[i+22:i+24])\n                        payments = get_payment_details(content[i+24:], nb_payments)\n                else:\n                    if content[i+23:i+25] == \"\\x31\\xfc\":\n                        nb_payments = 10\n                        payments = get_payment_details(content[i+24:], nb_payments)\n                    elif content[i+23:i+25] == \"\\xfc\\x0a\" or content[i+23:i+25] == \"\\xfd\\x08\" or content[i+23:i+25] == \"\\x08\\xfc\":\n                        nb_payments = 0\n                        payments = []\n                    else:\n                        #print \":\".join(\"{0:x}\".format(ord(c)) for c in content[i+23:i+25])\n                        nb_payments = int( content[i+23:i+25])\n                        payments = get_payment_details(content[i+25:], nb_payments)\n                if not payment_details.has_key(identifier):\n                    payment_details[identifier] = []\n                payment_details[identifier].extend(payments)\n            except ValueError:\n                if int(identifier[2:6]) > 2011:\n                    print \"nb of payments error\", identifier\n                    print \":\".join(\"{0:x}\".format(ord(c)) for c in content[i: i+10])\n                    print \":\".join(\"{0:x}\".format(ord(c)) for c in content[i+22:i+26])\n                    print \":\".join(\"{0:x}\".format(ord(c)) for c in content[i+12:i+65])\n                    print content[i+12:i+65]\n                pass\n    for entry in students:\n        #print \"-----------------------------\"\n        try:\n            entry.append_payments(payment_details[entry.identifier])\n        except KeyError:\n            #print \"no payments for: \" + entry.identifier\n            pass\n        #print entry.to_string()\n    students.reverse()\n    return students\n\ndef get_students_with_payments_between(students, date1, date2):\n    return filter(lambda s: s.get_payments_between(date1, date2), students)\n\n\nstudents = read_database_files()\n\nfeb = get_students_with_payments_between(students, date(2013,2,1), date(2013,2,28))\nmar = get_students_with_payments_between(students, date(2013,3,1), date(2013,3,31))\napr = get_students_with_payments_between(students, date(2013,4,1), date(2013,4,30))\nmay = get_students_with_payments_between(students, date(2013,5,1), date(2013,5,31))\n#remember: function must not have the same name....!!!\n\n\n\napp = Flask(__name__)\n\n@app.route('/')\n@requires_auth\ndef home():\n    return render_template('index.html')\n\n\n@app.route('/save-invoice', methods=[\"POST\"])\n@requires_auth\ndef save_invoice():\n    data = json.loads(request.form[\"data\"])\n    print \"before\"\n    #session[\"date\"] = data[\"date\"]\n    print \"before\"\n    #session[\"number\"] = str(int(data[\"nummer\"])+1)\n    print \"before\"\n    #print session[\"date\"]\n    print \"before\"\n    #print session[\"number\"]\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO invoices(title, reference, date, nummer, total) VALUES(?,?,?,?,?)\",(data[\"title\"], data[\"referentie\"], data[\"date\"], data[\"nummer\"], data[\"due\"]))\n    conn.commit()\n    invoice_id = cursor.lastrowid\n    for entry in data[\"entries\"]:\n        print entry[\"code\"]\n        cursor.execute(\"INSERT INTO invoice_entries(factuur_id, code, omschrijving, cost, btw, qty) VALUES(?,?,?,?,?,?)\",(invoice_id, entry[\"code\"], entry[\"omschrijving\"], entry[\"cost\"], entry[\"btw\"], entry[\"qty\"]))\n    conn.commit()\n    conn.close()\n    return request.form[\"data\"]\n\n@app.route('/edit-invoice', methods=[\"POST\"])\n@requires_auth\ndef edit_invoice():\n    data = json.loads(request.form[\"data\"])\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    cursor.execute(\"UPDATE invoices SET total=? where Id=?\",(data[\"due\"], data[\"id\"]))\n    conn.commit()\n    cursor.execute(\"DELETE FROM invoice_entries WHERE factuur_id=?\", (data[\"id\"],))\n    conn.commit()\n    for entry in data[\"entries\"]:\n        cursor.execute(\"INSERT INTO invoice_entries(factuur_id, code, omschrijving, cost, btw, qty) VALUES(?,?,?,?,?,?)\",(data[\"id\"], entry[\"code\"], entry[\"omschrijving\"], entry[\"cost\"], entry[\"btw\"], entry[\"qty\"]))\n    conn.commit()\n    conn.close()\n    return request.form[\"data\"]\n\n@app.route('/list_students')\n@requires_auth\ndef list_students():\n    s = []\n\n    for entry in students:\n        #payments = entry.get_payments_between(begin, end)\n        s.append(entry)\n\n    return render_template('student_list.html', students = s)\n\n@app.route('/list_feb')\n@requires_auth\ndef list_feb():\n    s = []\n\n    for entry in feb:\n        #payments = entry.get_payments_between(begin, end)\n        s.append(entry)\n\n    return render_template('febstudent_list.html', students = s)\n\n@app.route('/list_mar')\n@requires_auth\ndef list_mar():\n    s = []\n\n    for entry in mar:\n        #payments = entry.get_payments_between(begin, end)\n        s.append(entry)\n\n    return render_template('marstudent_list.html', students = s)\n\n@app.route('/list_apr')\n@requires_auth\ndef list_apr():\n    s = []\n\n    for entry in apr:\n        #payments = entry.get_payments_between(begin, end)\n        s.append(entry)\n\n    return render_template('aprstudent_list.html', students = s)\n@app.route('/list_may')\n@requires_auth\ndef list_may():\n    s = []\n\n    for entry in may:\n        #payments = entry.get_payments_between(begin, end)\n        s.append(entry)\n\n    return render_template('maystudent_list.html', students = s)\n\n@app.route('/student/<int:identifier>')\n@requires_auth\ndef student(identifier):\n    identifier = identifier - 1\n    if identifier < len(students):\n        if (identifier -1) < 0:\n            ppu = url_for('list_students')\n        else:\n            ppu = url_for('student',identifier = identifier)\n        if (identifier + 1) > len(students):\n            npu = url_for('list_students')\n        else:\n            bla = identifier + 2\n            npu = url_for('student', identifier = bla)\n        return render_template('student.html', identifier = identifier+1,student = students[identifier], next_profile_url = npu, previous_profile_url = ppu)\n    else:\n        return list_students()\n@app.route('/reload_data')\n@requires_auth\ndef reload_data():\n    global students\n    students = read_database_files()\n    return \"done\"\n\n@app.route('/invoice/<int:identifier>')\n@requires_auth\ndef invoice(identifier):\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    rows = []\n    for row in cursor.execute(\"SELECT * FROM invoices where reference=?\", (students[identifier-1].unique, )):\n        rows.append(row)\n    conn.close()\n    if len(rows)<1:\n        rows = None\n    return render_template('invoice.html', student = students[identifier-1], invoices = rows)\n\n@app.route('/feb/<int:identifier>')\n@requires_auth\ndef february(identifier):\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    rows = []\n    for row in cursor.execute(\"SELECT * FROM invoices where reference=?\", (feb[identifier-1].unique, )):\n        rows.append(row)\n    conn.close()\n    if len(rows)<1:\n        rows = None\n    if not \"date\" in session:\n        temp = date.today()\n        datum = str(temp.day) + \"/\" + str(temp.month) + \"/\" + str(temp.year)\n    else:\n        datum = session[\"date\"]\n    if not \"number\" in session:\n        number = \"123\"\n    else:\n        number = session[\"number\"]\n    return render_template('febinvoice.html', student = feb[identifier-1], invoices = rows, date = datum, number = number)\n@app.route('/mar/<int:identifier>')\n@requires_auth\ndef march(identifier):\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    rows = []\n    for row in cursor.execute(\"SELECT * FROM invoices where reference=?\", (mar[identifier-1].unique, )):\n        rows.append(row)\n    conn.close()\n    if len(rows)<1:\n        rows = None\n    if not \"date\" in session:\n        temp = date.today()\n        datum = str(temp.day) + \"/\" + str(temp.month) + \"/\" + str(temp.year)\n    else:\n        datum = session[\"date\"]\n    if not \"number\" in session:\n        number = \"123\"\n    else:\n        number = session[\"number\"]\n    return render_template('marinvoice.html', student = mar[identifier-1], invoices = rows, date=datum, number=number)\n@app.route('/apr/<int:identifier>')\n@requires_auth\ndef april(identifier):\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    rows = []\n    for row in cursor.execute(\"SELECT * FROM invoices where reference=?\", (apr[identifier-1].unique, )):\n        rows.append(row)\n    conn.close()\n    if len(rows)<1:\n        rows = None\n    if not \"date\" in session:\n        temp = date.today()\n        datum = str(temp.day) + \"/\" + str(temp.month) + \"/\" + str(temp.year)\n    else:\n        datum = session[\"date\"]\n    if not \"number\" in session:\n        number = \"123\"\n    else:\n        number = session[\"number\"]\n    return render_template('aprinvoice.html', student = apr[identifier-1], invoices = rows, date=datum, number=number)\n@app.route('/may/<int:identifier>')\n@requires_auth\ndef mei(identifier):\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    rows = []\n    for row in cursor.execute(\"SELECT * FROM invoices where reference=?\", (may[identifier-1].unique, )):\n        rows.append(row)\n    conn.close()\n    if len(rows)<1:\n        rows = None\n    if not \"date\" in session:\n        temp = date.today()\n        datum = str(temp.day) + \"/\" + str(temp.month) + \"/\" + str(temp.year)\n    else:\n        datum = session[\"date\"]\n    if not \"number\" in session:\n        number = \"123\"\n    else:\n        number = session[\"number\"]\n    return render_template('mayinvoice.html', student = may[identifier-1], invoices = rows, date=datum, number=number)\n    \n@app.route('/saved-invoice/<int:identifier>')\n@requires_auth\ndef saved_invoice(identifier):\n    conn = sqlite3.connect(\"database\")\n    cursor = conn.cursor()\n    rows = []\n    for row in cursor.execute(\"select * from invoices where Id=?\", (identifier, )):\n        rows.append(row)\n    if len(rows)==0:\n        conn.close()\n        return \"Factuur niet gevonden\"\n    entries = []\n    print \"before entries\"\n    for entry in cursor.execute(\"select * from invoice_entries where factuur_id=?\", (identifier, )):\n        entries.append(entry)\n\n    if len(entries) == 0:\n        conn.close()\n        return \"Geen data in factuur\"\n    print \"after entries\"\n    (identifier, title, reference, date, nummer, total) = rows[0]\n    conn.close()\n    print \"before render\"\n    return render_template('saved_invoice.html', title=title, fnr = nummer, date=date, ref=reference, entries=entries)\n    \n@app.route('/test')\n@requires_auth\ndef test():\n    return os.getcwd() + str(os.path.isfile(\"database\"))\n\nif __name__ == '__main__':\n    app.secret_key = key\n    if debug:\n        app.debug = True\n        app.run()\n    else:\n        app.run(host=\"0.0.0.0\", port=4343)\n"]],"start1":0,"start2":0,"length1":0,"length2":19801}]],"length":19801}
{"contributors":[],"silentsave":true,"ts":1368523556516,"patch":[[{"diffs":[[0,", key\n\n\n"],[1,"\n\n"],[0,"def chec"]],"start1":230,"start2":230,"length1":16,"length2":18}]],"length":19803,"saved":false}
{"ts":1368523560248,"patch":[[{"diffs":[[0,"g, key\n\n"],[1,"#test"],[0,"\n\n\ndef c"]],"start1":229,"start2":229,"length1":16,"length2":21}]],"length":19808,"saved":false}
